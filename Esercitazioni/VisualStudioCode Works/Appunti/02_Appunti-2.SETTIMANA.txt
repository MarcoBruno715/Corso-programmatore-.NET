/***********************************************************************************************************************
 * // utilizzare le regex per elaborare testi                                                                           *
 ***********************************************************************************************************************/

 Le regular expression sono una serie di caratteri che servono per verificare se una stringa è valida
 le regular expression sono molto utili per verificare se una stringa è un indirizzo email, un numero di telefono, 
 un numero di carta di credito o un numero di matricola
 
 Si indica con @  una regular expression
 Importante !!! inserisci la stringa         using System.Text.RegularExpressions;          senza di questa il programma non funziona 

 Esempio di Regex di Email:

 questo esercizio verifica se una stringa è un indirizzo email valido

 using System.Text.RegularExpressions; // aggiungere questa riga per usare le regular expression

    string pattern = @"^([a-z0-9_\.-]+)@([\a-z\.-]+)\.([a-z\.]{2,6})$"; // questo è un esempio regular expression di un Email

    Per indicare al programma che la linea e una regular expression si usa @ 
    ^ indica che la stringa deve iniziare con la seguente testo
    $ indica che la stringa deve finire con una parola dalle 2 alle 6 lettere
    ^[A-Z] indica che la parola deve iniziare con una lettera maiuscola che va dalla a alla z 
    \d indica se ce un numero 
    \W è un carattere speciale //Essa verifica che la string Target contenga un carattere speciale
    [a-z] è un carattere minuscolo
    @"^[A-Z][a-z]$"; // $ serve per indicare che la stringa deve finire con una lettera minuscola
    @"([A-Z]{3})\d{3}"; // {3} serve per indicare che la stringa deve essere composta da 3 caratteri
    \ serve per indicare che il simbolo / è un carattere speciale
    @"\*"; //       \ serve per indicare che il simbolo * è un carattere speciale
    @"\d{3}"; // {3} serve per indicare che la stringa deve essere composta da 3 caratteri
    \s serve per indicare uno spazio

    diverse implementazioni

    string pattern = @"http://"; // questa è la regular expression ma dobbiamo cambiarla per trovare gli url cioè le stringhe che iniziano con http:// e finiscono con .com

    string pattern = @"http://.*\.com"; // questa è la regular expression che trova gli url cioè le stringhe che iniziano con http:// e finiscono con .com

    per cercare gli url che iniziano con http: ed hanno un dominio di 2 o 3 lettere dobbiamo cambiare la regular expression in questo modo

   string pattern = @"http://.*\.[a-z]{2,3}";

   per cercare gli url che iniziano con http: ed hanno un dominio qualsiasi dobbiamo cambiare la regular expression

   string pattern = @"http://.*\.[a-z]+"; // il + indica che il dominio può essere di qualsiasi lunghezza
 
   per cercare gli url che iniziano con http: oppure https: usiamo s



/***********************************************************************************************************************
 * // creare una app console completa di interazioni utente                                                            *
 ***********************************************************************************************************************/

Qusto è un esempio di un app 

(In questo esercizio abbiamo visto il comando "switch" che in questo caso ha la funzione di "escelta" dei casi e il comando "default" )
("Default"è una parola chiave che indica il codice da eseguire se nessuna delle altre condizioni è soddisfatta)


  Console.WriteLine("Calcolatrice");

  while (true)    // esegue il ciclo finché non si inseriscono due numeri e si sceglie un'operazione
{
    Console.Write("Inserisci il primo numero: ");
    string input1 = Console.ReadLine();
    double num1;    // dichiara una variabile di tipo double per memorizzare il primo numero inserito dall'utente
    bool success1 = double.TryParse(input1, out num1); // tenta di convertire la stringa in un numero decimale

    if (!success1)  // verifica che la conversione sia andata a buon fine
    {
        Console.WriteLine("Input non valido! Inserisci un numero.");
        continue;   // se la conversione non è andata a buon fine, ripete il ciclo
    }

    Console.Write("Inserisci il secondo numero: ");
    string input2 = Console.ReadLine();
    double num2;    // dichiara una variabile di tipo double per memorizzare il secondo numero inserito dall'utente
    bool success2 = double.TryParse(input2, out num2);

    if (!success2)
    {
        Console.WriteLine("Input non valido! Inserisci un numero.");
        continue;  // se la conversione non è andata a buon fine, ripete il ciclo
    }

    Console.WriteLine("Scegli un'operazione:");
    Console.WriteLine("1. Addizione");
    Console.WriteLine("2. Sottrazione");
    Console.WriteLine("3. Moltiplicazione");
    Console.WriteLine("4. Divisione");

    Console.Write("Operazione scelta: ");   // chiede all'utente di scegliere un'operazione 
    string scelta = Console.ReadLine();    // memorizza la scelta dell'utente in una variabile di tipo string

    double risultato;   // dichiara una variabile di tipo double per memorizzare il risultato dell'operazione

    switch (scelta) // esegue un'operazione diversa a seconda della scelta dell'utente
    {
        case "1":   // se l'utente ha scelto l'addizione
            risultato = num1 + num2;    // esegue l'addizione
            Console.WriteLine("Il risultato dell'addizione è: " + risultato);
            break;  // esce dal ciclo
        case "2":   // se l'utente ha scelto la sottrazione
            risultato = num1 - num2;    // esegue la sottrazione
            Console.WriteLine("Il risultato della sottrazione è: " + risultato);
            break;  // esce dal ciclo
        case "3":   // se l'utente ha scelto la moltiplicazione
            risultato = num1 * num2;    // esegue la moltiplicazione
            Console.WriteLine("Il risultato della moltiplicazione è: " + risultato);
            break;  // esce dal ciclo
        case "4":   // se l'utente ha scelto la divisione
            if (num2 == 0)  // verifica che il secondo numero non sia zero
            {
                Console.WriteLine("Impossibile dividere per zero!");
            }
            else
            {
                risultato = num1 / num2;    // esegue la divisione
                Console.WriteLine("Il risultato della divisione è: " + risultato);
            }
            break;  // esce dal ciclo
        default:    // se l'utente non ha inserito un'operazione valida (1, 2, 3 o 4)
                    // default è una parola chiave che indica il codice da eseguire se nessuna delle altre condizioni è soddisfatta
            Console.WriteLine("Operazione non valida! Riprova.");
            break; // esce dal ciclo
    }
}


/***********************************************************************************************************************
 * // consultare un devecosystem tipo jetbrains ed stateof                                                              *
 ***********************************************************************************************************************/

 JetBrains (precedentemente IntelliJ) è un'azienda di sviluppo software ceca nata nel 2000 i cui strumenti hanno come mercato 
 gli sviluppatori software e i project manager.

 Sito web
 https://www.jetbrains.com/

 Questi sono i risultati del sesto sondaggio annuale condotto da JetBrains per monitorare il panorama della comunità degli sviluppatori.
 Questo rapporto è stato creato sulla base delle risposte di 29.269 sviluppatori di tutto il mondo che hanno partecipato al sondaggio nel 
 maggio-luglio 2022.
 Copre una vasta gamma di argomenti, inclusi linguaggi di programmazione, strumenti, tecnologie, dati demografici e persino fatti divertenti,
 nonché lo stile di vita degli sviluppatori.

 Di seguito faremo un confronto sui vari aspetti dati  dal  2017 al 2022 

 Programming languages  

 Si è notato che tra i linguaggi di programmazione piu usati  sono JavaScript , HTML / CSS ,Python, SQL, Java.
 Si è notato un aumento dell 'uso del python  e una diminuzione di Java nell'anno 17-22

 La metà di tutti gli sviluppatori intervistati prevede di adottare un nuovo linguaggio di programmazione. 
 Le due scelte più popolari per le prossime lingue sono Go e Rust, seguite da Kotlin, TypeScript e Python.


 Primary programming languages by age


 Le lingue con la quota più alta tra gli intervistati più giovani (18-20) sono Assembly, C, C++, Haskell, Lua, MatLab e Rust. 
 Questo forse non sorprende, poiché queste lingue sono spesso insegnate nelle università.

 I linguaggi con quote relativamente elevate tra gli sviluppatori più anziani sono COBOL, Assembly, CoffeeScript, Perl, Delphi e Visual Basic. 
 Ad eccezione di Assembly, questi linguaggi hanno quote basse tra gli sviluppatori di età inferiore ai 30 anni.

 C'è anche un basso interesse per Ruby tra i giovani sviluppatori.

 Tecnologie promettenti

 La maggior parte degli sviluppatori ha identificato AI/ML come la tecnologia più promettente. Oltre ai linguaggi di programmazione,
 gli intervistati hanno citato anche le tecnologie Blockchain, WebAssembly, Flutter, AR/VR e Cloud.


 Quali dispositivi usi per lo sviluppo?

 Le risposte indicano che gli sviluppatori apprezzano la mobilità. L'85% degli sviluppatori utilizza laptop per la codifica e il 39% utilizza laptop e desktop contemporaneamente.
 Il 9% degli intervistati ha affermato di programmare con uno smartphone, con il 65% di loro che sviluppa per dispositivi mobili!

 Stipendio

 Dalle analisi solo il 57% dei sviluppatori è soddisfatto del prorpio stipendio 

figure piu ricercate 2017-2022

progressiva declino linguaggi programma

linguaggi nascenti

indice di utilizzo


/***********************************************************************************************************************
 * // primi utilizzi di GIT, comando GIT CLONE                                                                         *
 ***********************************************************************************************************************/


 Git è un VCS (acronimo di Version Control System, in italiano Sistema di Controllo Versione) gratuito e open source che permette di 
 tenere traccia delle modifiche apportate ai file e cartelle di un progetto nel corso del tempo,
 conservando la storia di tutti i cambiamenti effettuati così che sia sempre possibile accedere alle diverse versioni del progetto stesso. 
 È inoltre possibile ripristinare, in parte o completamente, la struttura della directory base in modo che sia in essa presente una determinata 
 versione dei file e sottocartelle con le modifiche che erano state apportate in un esatto momento del passato.

 Git risulta particolarmente utile quando si lavora con dei file di testo semplice.
 Git viene solitamente usato tramite interfaccia a riga di comando
 Git è in grado di tener traccia delle modifiche apportate a un gruppo di file e cartelle. Per far ciò salva le informazioni relative a gruppi di file 
 all'interno di una struttura dati che prende il nome di repository.

 Non confondere con gitHUb , sono due cose diverse !

 Per iniziare ad usare Git dobbiamo scaricare l'apposita applicazione , collegandoci al sito  
 https://git-scm.com/downloads    (La versione 64 bit !)

 All'installazione non abbiamo selezionato nulla , abbiamo lasciato l'installazione cosi comè
 Dopodichè abbiamo installato il CLI gh_2.27.0_windows_amd64 .  

 "CLI" (Una Command Line Interface (CLI)  un'interfaccia a riga di comando, ovvero un'interfaccia basata su comandi testuali per eseguire azioni su un 
 sistema informatico ) 

 Link per CLI https://github.com/cli/cli/releases

 https://github.com/cli/cli/releases/download/v2.27.0/gh_2.27.0_windows_amd64.msi

 Creiamo il nostro account al sito https://github.com/ dove aprimo il nostro  token con scadenza al 02/08/23
 Dopodichè autentichiamo il nostro account con il comando gh auth login
 
 Infine abbiamo cercato un progetto scorrendo sul sito  https://github.com/ ed abbiamo clonato il nostro primo progetto con il comando:

 git clone 

Dopo aver cercato un progetto sul gitHUB cliccare sul pulsante verde code  e copiare ed incollare il link dato da GitHubCLI

Esempio link CLI
gh repo clone sevvalcakkmak/CSharp-Console-App-Examples

Esso ci scaricherà l'intera cartella di  progetto   sul nostro visual code studio .

Annotazioni !

Quando si è all'interno di una cartella progetto per navigare all'interno di essa basta digitare cd ed  trascinare la cartella dentro la console di visua studio code.
(Nota personale cancellare la &)
Per tornare "indietro" si scrivono i due punti  cd ..









